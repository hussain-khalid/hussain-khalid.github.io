"use strict";(self.webpackChunktemp_docusaurus=self.webpackChunktemp_docusaurus||[]).push([[241],{4270:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"tutorial-basics/video-calling-sdk-guide","title":"Video Calling SDK Integration Guide","description":"Complete guide to integrate Video Calling SDK across multiple platforms including JavaScript, React Native, Java, C++, and C# with code examples and best practices.","source":"@site/docs/tutorial-basics/video-calling-sdk-guide.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/video-calling-sdk-guide","permalink":"/docs/tutorial-basics/video-calling-sdk-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/video-calling-sdk-guide.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"title":"Video Calling SDK Integration Guide","description":"Complete guide to integrate Video Calling SDK across multiple platforms including JavaScript, React Native, Java, C++, and C# with code examples and best practices."},"sidebar":"writingSamplesSidebar","previous":{"title":"About Hussain Khalid","permalink":"/docs/intro"},"next":{"title":"API Getting Started Guide","permalink":"/docs/tutorial-basics/api-getting-started"}}');var l=i(4848),r=i(8453);const t={sidebar_position:1,title:"Video Calling SDK Integration Guide",description:"Complete guide to integrate Video Calling SDK across multiple platforms including JavaScript, React Native, Java, C++, and C# with code examples and best practices."},o="Video Calling SDK Integration Guide",s={},c=[{value:"Overview",id:"overview",level:2},{value:"Supported Platforms",id:"supported-platforms",level:3},{value:"Installation",id:"installation",level:2},{value:"JavaScript (Web)",id:"javascript-web",level:3},{value:"React Native",id:"react-native",level:3},{value:"Java (Android)",id:"java-android",level:3},{value:"C++ (Native)",id:"c-native",level:3},{value:"C# (.NET)",id:"c-net",level:3},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Initialize the SDK",id:"1-initialize-the-sdk",level:3},{value:"2. Create a Video Call",id:"2-create-a-video-call",level:3},{value:"3. Handle Video Rendering",id:"3-handle-video-rendering",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Screen Sharing",id:"screen-sharing",level:3},{value:"Recording and Streaming",id:"recording-and-streaming",level:3},{value:"Quality Control",id:"quality-control",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Common Error Scenarios",id:"common-error-scenarios",level:3},{value:"Retry Logic",id:"retry-logic",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Memory Management",id:"memory-management",level:3},{value:"Network Optimization",id:"network-optimization",level:3},{value:"Testing and Debugging",id:"testing-and-debugging",level:2},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"Upgrading from v1.x to v2.x",id:"upgrading-from-v1x-to-v2x",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Resource Management",id:"1-resource-management",level:3},{value:"2. User Experience",id:"2-user-experience",level:3},{value:"3. Security",id:"3-security",level:3},{value:"Support and Troubleshooting",id:"support-and-troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Getting Help",id:"getting-help",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"video-calling-sdk-integration-guide",children:"Video Calling SDK Integration Guide"})}),"\n",(0,l.jsx)(n.p,{children:"This comprehensive guide covers integrating our Video Calling SDK across multiple platforms, with specific implementations for JavaScript, React Native, Java, C++, and C#."}),"\n",(0,l.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,l.jsx)(n.p,{children:"Our Video Calling SDK provides cross-platform video communication capabilities with consistent APIs across all supported languages. This unified approach ensures developers can leverage the same core concepts while working in their preferred development environment."}),"\n",(0,l.jsx)(n.h3,{id:"supported-platforms",children:"Supported Platforms"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Platform"}),(0,l.jsx)(n.th,{children:"Language"}),(0,l.jsx)(n.th,{children:"Minimum Version"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Web"}),(0,l.jsx)(n.td,{children:"JavaScript"}),(0,l.jsx)(n.td,{children:"ES6+"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Mobile"}),(0,l.jsx)(n.td,{children:"React Native"}),(0,l.jsx)(n.td,{children:"0.60+"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Android"}),(0,l.jsx)(n.td,{children:"Java"}),(0,l.jsx)(n.td,{children:"API Level 21+"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"iOS/macOS"}),(0,l.jsx)(n.td,{children:"C++"}),(0,l.jsx)(n.td,{children:"C++14"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:"Windows"}),(0,l.jsx)(n.td,{children:"C#"}),(0,l.jsx)(n.td,{children:".NET Framework 4.7+"})]})]})]}),"\n",(0,l.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,l.jsx)(n.h3,{id:"javascript-web",children:"JavaScript (Web)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npm install @videocall/web-sdk\n# or\nyarn add @videocall/web-sdk\n"})}),"\n",(0,l.jsx)(n.h3,{id:"react-native",children:"React Native"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"npm install @videocall/react-native-sdk\ncd ios && pod install  # iOS only\n"})}),"\n",(0,l.jsx)(n.h3,{id:"java-android",children:"Java (Android)"}),"\n",(0,l.jsxs)(n.p,{children:["Add to your ",(0,l.jsx)(n.code,{children:"app/build.gradle"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-gradle",children:"dependencies {\n    implementation 'com.videocall:android-sdk:2.5.0'\n}\n"})}),"\n",(0,l.jsx)(n.h3,{id:"c-native",children:"C++ (Native)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cmake",children:"find_package(VideoCallSDK REQUIRED)\ntarget_link_libraries(your_target VideoCallSDK::VideoCallSDK)\n"})}),"\n",(0,l.jsx)(n.h3,{id:"c-net",children:"C# (.NET)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"Install-Package VideoCall.NET.SDK\n"})}),"\n",(0,l.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,l.jsx)(n.h3,{id:"1-initialize-the-sdk",children:"1. Initialize the SDK"}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"JavaScript"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"import { VideoCallClient } from '@videocall/web-sdk';\n\nconst client = new VideoCallClient({\n  apiKey: 'your-api-key',\n  environment: 'production', // or 'staging'\n  logLevel: 'info'\n});\n\nawait client.initialize();\n"})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"React Native"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"import { VideoCallManager } from '@videocall/react-native-sdk';\n\nconst manager = new VideoCallManager({\n  apiKey: 'your-api-key',\n  environment: 'production'\n});\n\n// Initialize with permissions\nawait manager.initialize({\n  requestPermissions: true\n});\n"})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"Java (Android)"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'import com.videocall.sdk.VideoCallClient;\nimport com.videocall.sdk.VideoCallConfig;\n\nVideoCallConfig config = new VideoCallConfig.Builder()\n    .setApiKey("your-api-key")\n    .setEnvironment(Environment.PRODUCTION)\n    .build();\n\nVideoCallClient client = VideoCallClient.create(context, config);\nclient.initialize(new InitializationCallback() {\n    @Override\n    public void onSuccess() {\n        // SDK initialized successfully\n    }\n\n    @Override\n    public void onError(VideoCallException error) {\n        // Handle initialization error\n    }\n});\n'})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"C++"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:'#include <videocall/VideoCallClient.h>\n\nusing namespace videocall;\n\nVideoCallConfig config;\nconfig.apiKey = "your-api-key";\nconfig.environment = Environment::PRODUCTION;\n\nauto client = VideoCallClient::create(config);\nclient->initialize([](const Result& result) {\n    if (result.isSuccess()) {\n        // SDK initialized successfully\n    } else {\n        // Handle initialization error\n    }\n});\n'})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"C#"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:'using VideoCall.SDK;\n\nvar config = new VideoCallConfig\n{\n    ApiKey = "your-api-key",\n    Environment = Environment.Production\n};\n\nvar client = new VideoCallClient(config);\nawait client.InitializeAsync();\n'})})]}),"\n",(0,l.jsx)(n.h3,{id:"2-create-a-video-call",children:"2. Create a Video Call"}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"JavaScript"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Join an existing room or create a new one\nconst call = await client.joinCall({\n  roomId: 'room-123',\n  userId: 'user-456',\n  displayName: 'John Doe',\n  video: true,\n  audio: true\n});\n\n// Handle call events\ncall.on('participant-joined', (participant) => {\n  console.log(`${participant.displayName} joined the call`);\n});\n\ncall.on('participant-left', (participant) => {\n  console.log(`${participant.displayName} left the call`);\n});\n"})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"React Native"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Join call with video view component\nconst call = await manager.joinCall({\n  roomId: 'room-123',\n  userId: 'user-456',\n  displayName: 'John Doe'\n});\n\n// In your React component\nimport { VideoCallView } from '@videocall/react-native-sdk';\n\nfunction CallScreen() {\n  return (\n    <VideoCallView\n      call={call}\n      style={{ flex: 1 }}\n      showControls={true}\n      onCallEnd={() => {\n        // Handle call end\n      }}\n    />\n  );\n}\n"})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"Java (Android)"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'CallOptions options = new CallOptions.Builder()\n    .setRoomId("room-123")\n    .setUserId("user-456")\n    .setDisplayName("John Doe")\n    .enableVideo(true)\n    .enableAudio(true)\n    .build();\n\nclient.joinCall(options, new CallCallback() {\n    @Override\n    public void onCallJoined(VideoCall call) {\n        // Call joined successfully\n        call.setEventListener(new CallEventListener() {\n            @Override\n            public void onParticipantJoined(Participant participant) {\n                // Handle participant joined\n            }\n\n            @Override\n            public void onParticipantLeft(Participant participant) {\n                // Handle participant left\n            }\n        });\n    }\n\n    @Override\n    public void onError(VideoCallException error) {\n        // Handle join error\n    }\n});\n'})})]}),"\n",(0,l.jsx)(n.h3,{id:"3-handle-video-rendering",children:"3. Handle Video Rendering"}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"JavaScript"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Get local video stream\nconst localStream = call.getLocalVideoStream();\nconst localVideoElement = document.getElementById('local-video');\nlocalVideoElement.srcObject = localStream;\n\n// Handle remote video streams\ncall.on('stream-added', (participant, stream) => {\n  const remoteVideo = document.createElement('video');\n  remoteVideo.srcObject = stream;\n  remoteVideo.autoplay = true;\n  document.getElementById('remote-videos').appendChild(remoteVideo);\n});\n"})})]}),"\n",(0,l.jsxs)(i,{children:[(0,l.jsx)("summary",{children:(0,l.jsx)("strong",{children:"C++"})}),(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"// Set up video renderers\nclass CustomVideoRenderer : public IVideoRenderer {\npublic:\n    void onFrame(const VideoFrame& frame) override {\n        // Render video frame\n        renderFrame(frame.data(), frame.width(), frame.height());\n    }\n};\n\nauto localRenderer = std::make_shared<CustomVideoRenderer>();\ncall->setLocalVideoRenderer(localRenderer);\n\ncall->setEventHandler([](const CallEvent& event) {\n    if (event.type == CallEventType::PARTICIPANT_JOINED) {\n        auto remoteRenderer = std::make_shared<CustomVideoRenderer>();\n        call->setRemoteVideoRenderer(event.participant.id, remoteRenderer);\n    }\n});\n"})})]}),"\n",(0,l.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,l.jsx)(n.h3,{id:"screen-sharing",children:"Screen Sharing"}),"\n",(0,l.jsx)(n.p,{children:"Screen sharing is supported across all platforms with platform-specific implementations:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// JavaScript - Web Screen Share\nconst screenStream = await call.startScreenShare({\n  audio: true, // Include system audio\n  cursor: 'always' // Show cursor in shared screen\n});\n\n// Stop screen sharing\nawait call.stopScreenShare();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"recording-and-streaming",children:"Recording and Streaming"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Start recording the call\nconst recording = await call.startRecording({\n  format: 'mp4',\n  quality: 'hd',\n  includeAudio: true\n});\n\n// Stop recording\nconst recordingUrl = await call.stopRecording();\n"})}),"\n",(0,l.jsx)(n.h3,{id:"quality-control",children:"Quality Control"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Adjust video quality dynamically\nawait call.setVideoQuality({\n  resolution: '720p', // '480p', '720p', '1080p'\n  frameRate: 30,\n  bitrate: 'auto' // or specific bitrate in kbps\n});\n\n// Enable adaptive bitrate\ncall.enableAdaptiveBitrate(true);\n"})}),"\n",(0,l.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,l.jsx)(n.h3,{id:"common-error-scenarios",children:"Common Error Scenarios"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Comprehensive error handling\ncall.on('error', (error) => {\n  switch (error.code) {\n    case 'NETWORK_ERROR':\n      // Handle network connectivity issues\n      showNetworkErrorDialog();\n      break;\n    case 'PERMISSION_DENIED':\n      // Handle camera/microphone permission issues\n      requestPermissions();\n      break;\n    case 'INCOMPATIBLE_BROWSER':\n      // Handle browser compatibility issues\n      showBrowserUpgradeMessage();\n      break;\n    case 'ROOM_FULL':\n      // Handle room capacity limits\n      showRoomFullMessage();\n      break;\n    default:\n      console.error('Unexpected error:', error);\n  }\n});\n"})}),"\n",(0,l.jsx)(n.h3,{id:"retry-logic",children:"Retry Logic"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Implement connection retry with exponential backoff\nasync function joinCallWithRetry(options, maxRetries = 3) {\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      return await client.joinCall(options);\n    } catch (error) {\n      if (attempt === maxRetries) throw error;\n\n      const delay = Math.pow(2, attempt) * 1000; // Exponential backoff\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,l.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-cpp",children:"// C++ - Proper resource cleanup\nclass CallManager {\nprivate:\n    std::shared_ptr<VideoCall> activeCall;\n\npublic:\n    ~CallManager() {\n        if (activeCall) {\n            activeCall->leave();\n            activeCall.reset();\n        }\n    }\n\n    void leaveCall() {\n        if (activeCall) {\n            activeCall->leave();\n            activeCall.reset(); // Release resources\n        }\n    }\n};\n"})}),"\n",(0,l.jsx)(n.h3,{id:"network-optimization",children:"Network Optimization"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// JavaScript - Connection quality monitoring\ncall.on('connection-quality-changed', (quality) => {\n  switch (quality.level) {\n    case 'excellent':\n      // Enable high-quality features\n      call.setVideoQuality({ resolution: '1080p' });\n      break;\n    case 'good':\n      call.setVideoQuality({ resolution: '720p' });\n      break;\n    case 'poor':\n      // Reduce quality to maintain connection\n      call.setVideoQuality({ resolution: '480p' });\n      break;\n  }\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"testing-and-debugging",children:"Testing and Debugging"}),"\n",(0,l.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// Enable comprehensive logging\nconst client = new VideoCallClient({\n  apiKey: 'your-api-key',\n  logLevel: 'debug', // 'error', 'warn', 'info', 'debug'\n  enableMetrics: true // Collect performance metrics\n});\n\n// Access debug information\nconst debugInfo = await call.getDebugInfo();\nconsole.log('Call statistics:', debugInfo.statistics);\nconsole.log('Network metrics:', debugInfo.network);\n"})}),"\n",(0,l.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-java",children:'// Java - Unit test example\n@Test\npublic void testCallConnection() {\n    VideoCallClient client = VideoCallClient.create(context, config);\n\n    CountDownLatch latch = new CountDownLatch(1);\n    AtomicReference<VideoCall> callRef = new AtomicReference<>();\n\n    client.joinCall(callOptions, new CallCallback() {\n        @Override\n        public void onCallJoined(VideoCall call) {\n            callRef.set(call);\n            latch.countDown();\n        }\n\n        @Override\n        public void onError(VideoCallException error) {\n            fail("Call join failed: " + error.getMessage());\n        }\n    });\n\n    assertTrue("Call should join within 5 seconds",\n               latch.await(5, TimeUnit.SECONDS));\n    assertNotNull("Call should not be null", callRef.get());\n}\n'})}),"\n",(0,l.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,l.jsx)(n.h3,{id:"upgrading-from-v1x-to-v2x",children:"Upgrading from v1.x to v2.x"}),"\n",(0,l.jsx)(n.p,{children:"Key changes in SDK v2.0:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Initialization"}),": Now requires explicit ",(0,l.jsx)(n.code,{children:"initialize()"})," call"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Event Handling"}),": Unified event system across all platforms"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Permissions"}),": Automatic permission handling (can be disabled)"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-javascript",children:"// v1.x (deprecated)\nconst client = new VideoCallClient('api-key');\nclient.joinCall('room-id');\n\n// v2.x (current)\nconst client = new VideoCallClient({ apiKey: 'api-key' });\nawait client.initialize();\nconst call = await client.joinCall({ roomId: 'room-id' });\n"})}),"\n",(0,l.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,l.jsx)(n.h3,{id:"1-resource-management",children:"1. Resource Management"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Always call ",(0,l.jsx)(n.code,{children:"leave()"})," when exiting calls"]}),"\n",(0,l.jsx)(n.li,{children:"Dispose of video renderers properly"}),"\n",(0,l.jsx)(n.li,{children:"Handle app backgrounding/foregrounding"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"2-user-experience",children:"2. User Experience"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Implement loading states during call connection"}),"\n",(0,l.jsx)(n.li,{children:"Provide clear error messages and recovery options"}),"\n",(0,l.jsx)(n.li,{children:"Test across different network conditions"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"3-security",children:"3. Security"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Never expose API keys in client-side code"}),"\n",(0,l.jsx)(n.li,{children:"Implement proper authentication for room access"}),"\n",(0,l.jsx)(n.li,{children:"Validate user permissions server-side"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"support-and-troubleshooting",children:"Support and Troubleshooting"}),"\n",(0,l.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Issue"}),": Video not displaying\n",(0,l.jsx)(n.strong,{children:"Solution"}),": Check camera permissions and video element setup"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Issue"}),": Audio not working\n",(0,l.jsx)(n.strong,{children:"Solution"}),": Verify microphone permissions and audio context initialization"]}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Issue"}),": High CPU usage\n",(0,l.jsx)(n.strong,{children:"Solution"}),": Optimize video resolution and frame rate based on device capabilities"]}),"\n",(0,l.jsx)(n.h3,{id:"getting-help",children:"Getting Help"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Documentation"}),": Browse our complete API reference"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Sample Code"}),": Check platform-specific examples"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Support"}),": Contact our developer support team"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Community"}),": Join our developer forum for community support"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.em,{children:"This guide represents the type of comprehensive, multi-platform documentation I create to help developers successfully integrate complex SDKs across different technologies and use cases."})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var a=i(6540);const l={},r=a.createContext(l);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);